서블릿에 대하여...

servlet : 웹 서버가 제공하는 라이브러리를 이용하는 자바 코드

servlet 특징
동적 웹 애플리케이션 컴포넌트
파일명.java => 파일명.class
클라이언트(사용자)의 요청에 의해 종적으로 작동하고, 응답은 html 기반 (html / jsp)의 파일
자바의 thread(멀티)를 이용하여 동작
MVC 패턴에서 Controller 역할을 담당

Java Thread
M : Model <= Data Access Object / Data Transfer Object
V : View <= 출력 화면
C : Controller <= 통제(main())

@WebServlet("/test")
@ : 어노테이션
WebServlet : 어노테이션 클래스
("/test") : 웹 주소를 통해 요청시 사용되는 이름

public class Test extends HttpServlet 
// HttpServlet 클래스를 상속받아야만 서블릿 기능이 작동
  }
  
private static final long serialVersionUID = 1L;
절대 수령 금지!!!

public Test() {
super();  // 부모 클래스의 생성자를 이용하여 초기화
  }


// 요청 방식이 get일 경우 자동 호출
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException,
    IOException {
    	HttpServletRequest request : 외부로부터 전송된 데이터 저장
    	request <== jsp 내장객체

	HttpServletResponse response : 내부 데이터를 외부로 내보낼때
		response <= jsp 내장객체
  }
  
// 요청 방식이 post일 경우 자동 호출
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException,
    IOException { 

  }
  
=======================================================
Servlet : extends HttpServlet
doGet() / doPost() : 매개변수
HttpServletRequest / HttpServletResponse
doGet() : 전송방식 get 방식일 경우 자동 호출

form 태그 method="get" 또는 설정하지 않았을 경우
=> 웹 주소줄을 통해 http://~~/~~~/~~.jsp?파라미터=값

<a href=""> 속성을 이용하여 링크를 사용할 경우
doPost() : 전송방식 post 방식일 경우 자동 호출

<form 태그 method="post">
=> 웹 주소줄에 파라미터와 값이 보이지 않는다.

Servlet 요청시 전달된 파라미터 값을 추출 : 내장 객체 request.getParameter("파라미터명");

Servlet 작동 순서에 대하여..
클라이언트가 Servlet에게 요청시 서버(톰캣0에서는 servlet 컨테이너를 생성, 요청이 있을때마다 스레드 생성!!!!

Servlet 라이프 사이클 (생명 주기)
	1. 최초 요청시 Servlet 객체 생성
	2. init() 메서드 호출 : 서블릿 구동 직전에 처리해야 할 일들
	3. service() / doGet(), doPost() 호출 : 요청시 매번
	4. distory() : 맨 마지막에 한번 호출 => 불필요한 자원들 자원 해제 (close())
	
HTML 태그와 Servlet(JSP) 간의 데이터 주고 받을 경우
	post 방식은 한글 설정을 아무리 잘 하더라도 깨져서 전달된다..
	따라서, 한글 데이터를 전달 받는 쪽에서는 인코딩을 재설정 해야한다.
	=> request.setCharacterEncoding("UTF-8")
================================================
Servlet 등록 방법
	1. @(어노테이션)을 이용 : @WebServlet("/hello")
	    이클립스 마법사를 이용하여 Servlet 클래스를 생성할때 설정 가능
	     Servlet 클래스 생성 후 @webServlet("/hello")를 추가하여 설정도 가능
	     => hello 변경 가능 (단, 서버구동 중지 상태에서 수정)
	     
	     사용(요청)방법 : @WebServlet("/hello")
	      <form action="hello">~~</form>	
	      
	      어노테이션 단점 : 유지보수가 어렵다..
	      
	 2. web.xml에 직접 등록하는 방법 : 수시로 변경 가능
	     => 즉, Java 원본 코드를 변경하지 않고 유지보수가 용이
	     
	     단점 : 매번 개발자가 일일히 등록 해야하고..
	               web.xml 문서 내에 문제가 발생할 경우, 프로젝트 구동이 안된다!!! (error 404)
	 
	 2-1.  xml 문서 내에는 가급적 한글 주석을 사용하지 않는다!!!
	         xml 문서 내에 주석(comment) <!-- -->
	         
	         xml 문서의 첫 줄은 선언부로 시작
	         <?xml version="1.0" encoding="UTF-8"?>
	         
	         xmlns는 xml namespace의 약어
	         xml은 기본적으로 태그를 제공하지 않고, 개발자가 태그를 생성하여 작성
	        톰캣에서는 web.xml 문서를 위한 xml 태그가 정의되어 있기 때문에
	         xml 태그를 해석하기 위한 namespace가 반드시 필요
	         
	         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	         xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"
	         id ="WebApp_ID"
	         version ="3.1"
	         
	         <display-name>~~</display-name>
	         톰캣이 어플리케이션을 구별할때 사용되는 태그 : 생략 가능
	         
	         <welcome-file-list>
	         	<welcome-file>~~</welcome-file>
	         </welcome-file-list>                  
		     => 사용자가 프로젝트명으로 요청했을 경우 기본 페이지를 설정하는 부분
		        ex. www.naver.com => 메인 페이지
		        
		     web.xml 문서에 서블릿을 등록할 경우
		     <servlet></servlet>과 <servlet-mapping></servlet-mapping>이 한쌍을 이뤄야한다!!!
		     
					<servlet>
						<servlet-name>서블릿 클래스의 별명(id)</servlet-name>
						<servlet-class>서블릿 클래스의 풀 네임</servlet-class>
					</servlet>
					
					<servlet-mapping>
						<servlet-name>서블릿 클래스의 별명(id)</servlet-name>
						<url-pattern>웹에서 요청할 서블릿 이름</url-pattern>
					</servlet-mapping>
					
			서블릿 초기화 파라미터 : ServletConfig
			특정 Servlet이 생성될때 초기에 필요한 데이터들을 설정하는 방법
				1. 이클립스 마법사를 이용하여 서블릿 생성시 설정하는 방법
				    @WebServlet(
				    urlPattens = {"/initParam2"},
				    initParams = { 
				    @WebInitParam(name = "name", value = "홍길동"),
				    @WebInitParam(name = "phone", value = "01012345678")
				    })
				
				2. web.xml 문서에 서블릿 등록할때 설정하는 방법
					<servlet>
							<servlet-name></servlet-name>
							<servlet-class></servlet-class>    
				    	<init-param>
				    		<param-name>초기 파라미터 이름</param-name>
				    		<param-value>해당값</param-value>
				    	</init-param>
				    </servlet>
				    
				    <servlet-mapping>
				    	<servlet-name></servlet-name>
				    	<url-pattern></url-pattern>
				    </servlet-mapping>
				    
				    서블릿 초기화 파라미터 추출하는 방법 : ServletConfig
				     String 변수 = getInitParameter("초기 파라미터명");
				     
jsp & servlet 데이터 공유 : ServletContext
  여러 servlet에서 공통적으로 사용할 데이터를 공유할 경우,
  context parameter를 이용하여 web.xml 문서에 기술
			
    <context-param>
       <param-name>공유 파라미터 이름</param-name>
       <param-value>공유값</param-value>
    </context-param>				
							
 공유 데이터 추출 : context 영역 데이터
  String 변수 = getServletContext().getInitParameter("공유 파라미터 이름");
   		     
  *** WEB-INF 폴더 내부는 외부에서 접근 못하도록 차단된 폴더!!!
      web.xml
      ~~.jsp / ~~.html 파일들은 반드시 WebContent 영역에 존재!!!!
     	  
jsp 또는 servlet으로 바로 이동 : response.sendRedirect()
  response.sendRedirect("page.jsp?no=1&search=spring");
     	     	
  response.sendRedirect() 사용시 주의사항
  response.sendRedirect()를 기준으로 위, 아래에는 화면 출력코드를 사용하지 않는다!!!!
  이유 : response.sendRedirect()를 만나면 해당 페이지로 바로 이동하기 때문에..

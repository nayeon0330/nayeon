# -*- coding: utf-8 -*-
"""
Created on Mon Dec 27 14:20 2021

튜플에 대한 정리
"""

1. 튜플은 한번 생성하면 값을 변경할 수 없다..
2. 리스트에 비해 구조가 간단하기 때문에 데이터에 대한 접근 속도가 빠르다.
3. 데이터 접근 방법은 리스트와 동일

선언 : (데이터, 데이터, ...)
"""

# 1. 문자열을 갖는 튜플
colors = ("red", "green", "blue")
type(colors)
'''
tuple
'''

# 2. 숫자를 갖는 튜플
numbers = (1, 2, 3, 4, 5 )
type(numbers)
'''
tuple
'''

### 튜플 데이터 인덱싱(추출)
t1 = (1, 2, 3, 4, 5)
print(t1[0])


### 튜플 데이터 수정
t1[0] = 100
'''
튜플은 보유 데이터를 수정할 수 없기 때문에 오류 발생
Traceback (most recent call last):
    ~~~~
TypeError: 'tuple' object does not support item assignment   
'''



### 튜플 연산
"""
튜플도 시퀀스의 일종이기 때문에,
인덱싱 / 슬라이싱이 가능하고,
튜플간의 덧셈 / 반복연산도 가능
"""
t2 = t1 + t1
'''
(1, 2, 3, 4, 5, 1, 2, 3, 4, 5)
'''

t3 = colors + numbers
'''
('red', 'green', 'blue', 1, 2, 3, 4, 5)
'''

t4 = t1 * 3
'''
(1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5)
'''

### 원의 넓이와 둘레를 한번에 반환하는 함수
"""
작업 내용
1. 원의 넓이와 둘레를 한번에 반환하는 사용자 정의 함수 선언
2. 사용자 정의 함수는 원의 반지름을 Console로부터 입력받은 값을 전달받는다..
3. 사용자 정의 함수는 전달받은 반지름을 이용하여 원의 넓이와 둘레를 구하고
4. 두가지 값을 반환

원의 넓이 = 3.14~~~ * 반지름 * 반지름
원의 넓이 = 2 * 3.14~~ * 반지름

3.14~~ : 수학에 관련된 함수들을 가지고 있는 math 모듈의 pi를 사용
"""
import math

def caluCircle(r):
    area = math.pi * r * r
    circum = 2 * math.pi * r
    return area, circum

radius = float(input('원의 반지름을 입력 : '))

area, circum = caluCircle(radius)

print('원의 넓이 : ' + str(area) + '이고, 원의 둘레 : ' + str(circum))
'''
원의 반지름을 입력 : 15
원의 넓이 : 706.8583470577034이고,
원의 둘레 : 94.24777960769379
'''


## 두가지 변수 값을 치환할 경우, 튜플을 사용하면 편리
a = 10
b = 22

## a 값을 b에게 / b 값을 a에게
# 1. 튜플을 사용하지 않았을 경우
temp = a
a = b
b = temp 
'''
a <== 22 / b <== 10
'''

# 튜플을 사용할 경우
a = 10
b = 22

a, b = b, a
'''
a <== 22 / b <== 10
'''

a = 10
b = 22
(a, b) = (b, a)
'''
a <== 22 / b <== 10
'''




### 서울, 부산, 인천, 광주, 대전의 인구를 가지는 리스트 작성 후, 
#   최대, 최소 인구를 가진 도시명과 인구수를 출력
"""
작업 내용
1. 리스트 내에 도시명, 인구수, ... 저장해도 되지만
   리스트는 동일한 형태의 데이터를 넣어주는 것이 좋고,
   (도시명, 인구수)와 같이 튜플로 저장
2. 리스트내의 튜플데이터들을 이용하여 최대 / 최소 인구수 및 도시명을 출력   
"""
# 리스트 생성
#               0               1              2                3              4
city_info = [('서울', 9765), ('부산', 3441), ('인천', 2954), ('광주', 1501), ('대전', 1531)]

# 튜플데이터들을 하나씩 추출하여 최대 / 최소 인구수 및 도시명을 출력
max_pop = 0                       
min_pop = 999999999999999999
total_pop = 0

max_city = None
min_city = None

#    0      1
# ('서울', 9765)
for city in city_info:
    total_pop += city[1]
    
    if city[1] > max_pop:
        max_pop = city[1]
        max_city = city       # ('서울', 9765)
    
    if city[1] < min_pop:
        min_pop = city[1]
        min_city = city       # ('서울', 9765)

print('최대 인구도시 : {0}, 인구수 : {1} 천명'.format(max_city[0],  max_city[1]))
print('최소 인구도시 : {0}, 인구수 : {1} 천명'.format(min_city[0],  min_city[1]))
print('전체 인구수 : {0} 천명'.format(total_pop))
'''
최대 인구도시 : 서울, 인구수 : 9765 천명
최소 인구도시 : 광주, 인구수 : 1501 천명
전체 인구수 : 19192 천명
'''

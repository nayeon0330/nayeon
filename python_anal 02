# -*- coding: utf-8 -*-
"""
Created on Wed Dec 29 09:00:43 2021

셀프 주유소는 과연 저렴한지 : about self_oil_anal
"""
#### 작업에 필요한 모듈 import

# 분석을 위한 모듈 : pandas
import pandas as pd

# 파일들에 관련된 모듈 : glob
# from glob import glob : glob 전체 모듈명 / glob 함수
from glob import glob

# 기본 시각화를 위한 모듈
import matplotlib.pyplot as plt

# 다양한 시각화를 위한 모듈
import seaborn as sns

# 운영체제 관련 모듈
import platform

# json 객체를 다루기 위한 모듈
import json

# 행정구역 시각화를 위한 모듈
# 기본적으로 설치가 되어 있지 않기 때문에 설치가 선행되어야 한다...
# Console에서 pip install 설치 모듈
# pip install folium과 같이 설치가 종료된 후, import
import folium

# 구글 맵을 사용하기 위한 모듈
# 기본적으로 설치가 되어 있지 않기 때문에 설치가 선행되어야 한다...
# Console에서 pip install 설치 모듈
# pip install googlemaps과 같이 설치가 종료된 후, import
# 단, 구글의 개발자 등록이 되어 있어야 하고, 
# 해당 서비스를 사용하기 위한 API Key가 활성화 되어 있어야함...
import googlemaps

# 기본 통계 등 숫자에 관한 모듈
import numpy as np

# 경고 관련 모듈
import warnings
# 향후 없어질 함수(메서드)에 대한 경고 무시 코드
warnings.simplefilter(action='ignore', category=FutureWarning)


# 시각화 작업시, 운영체제에 따라 한글 깨짐 방지를 위한 코드 작성
path = "c:/Windows/Fonts/malgun.ttf"
from matplotlib import font_manager, rc
if platform.system() == 'Darwin':
    rc('font', family='AppleGothic')
elif platform.system() == 'Windows':
    font_name = font_manager.FontProperties(fname=path).get_name()
    rc('font', family=font_name)
else:
    print('Unknown system... sorry~~~~')

#### ------- 여기까지 사전준비 작업 끝 -------------------- ####





# ----------------------------------------- #
### 1. 구별 주유 가격에 대한 데이터의 정리 ####
# ----------------------------------------- #

# 1. 필요한 다수의 파일이 있는 경로를 추출
station_files = glob('./data/지역_위치별*xls')

# 2. 총 24개의 엑셀파일들을 로드(읽기)
tmp_raw = []

# 3. 각 엑셀파일들을 읽어서 데이터프레임으로 저장한 후
#    tmp_raw 리스트에 추가
for file_name in station_files:
    tmp = pd.read_excel(file_name, header=2)
    tmp_raw.append(tmp)
    
# 4. tmp_raw 리스트의 각항목에 해당하는 데이터프레임을 
#    하나의 데이터프레임으로 연결
# 리스트가 각항목(데이터프레임)을 하나의 데이터프레임으로 연결 : Pandas.concat(리스트)
station_raw = pd.concat(tmp_raw)

# 하나의 데이터프레임으로 합쳐진 데이터프레임(station_raw) 정보 확인
station_raw.info()

'''
<class 'pandas.core.frame.DataFrame'>              <= 전체 타입
Int64Index: 491 entries, 0 to 19                   <= 데이터 갯수
Data columns (total 10 columns):                   <= 컬럼 갯수
 #   Column  Non-Null Count  Dtype                 <= 컬럼명 / null값 여부 / 각 타입
---  ------  --------------  ----- 
 0   지역      491 non-null    object
 1   상호      491 non-null    object
 2   주소      491 non-null    object
 3   상표      491 non-null    object
 4   전화번호    491 non-null    object
 5   셀프여부    491 non-null    object
 6   고급휘발유   491 non-null    object
 7   휘발유     491 non-null    object
 8   경유      491 non-null    object
 9   실내등유    491 non-null    object
dtypes: object(10)                                <= 총 10개의 타입
memory usage: 42.2+ KB                            <= 전체 크기
'''
## 숫자가 아님 : NaN , 결측지(-)
## Null : 값이 없다.

# 5. 분석을 위한 필요 컬럼들만 추출하여 작업용 데이터프레임에 저장
#    추출 컬럼 : 상호 / 주소 / 휘발유 / 셀프여부 / 상표
stations = pd.DataFrame({'oil_store': station_raw['상호'],
                         '주소': station_raw['주소'],
                         '가격': station_raw['휘발유'],
                         '셀프': station_raw['셀프여부'],
                         '상표': station_raw['상표']
                         })

# '구' 컬럼 추가
stations['구'] = [eachAddress.split()[1] for eachAddress in stations['주소']]

'''
0     강동구
1     강동구
2     강동구
3     강동구
4     강동구

15    도봉구
16    도봉구
17    도봉구
18    도봉구
19    도봉구
Name: 구, Length: 491, dtype: object
'''

# '구' 컬럼내의 결측치 확인
stations['구'].unique()

'''
array(['강동구', '동대문구', '동작구', '마포구', '서대문구', '서초구', '성동구', '서울특별시', '성북구',
       '송파구', '양천구', '영등포구', '강북구', '용산구', '은평구', '종로구', '중구', '중랑구',
       '강서구', '관악구', '광진구', '구로구', '금천구', '노원구', '도봉구', '특별시'],
      dtype=object)
'''

# 확인
stations[stations['구'] == '서울특별시']

'''
      oil_store                           주소    가격 셀프     상표      구
12  SK네트웍스(주)효진주유소  1 서울특별시 성동구 동일로 129 (성수동2가)  1654  N  SK에너지  서울특별시
'''

stations.loc[stations['구'] == '서울특별시', '구'] = '성동구'

'''
stations 데이터프레임에서
stations['구'] == '서울특별시' 조건에 해당하는
'구' 값을
'성동구'로 변경        
'''

stations['구'].unique()
'''
'서울특별시' => '성동구' 변경된 내용 확인

array(['강동구', '동대문구', '동작구', '마포구', '서대문구', '서초구', '성동구', '성북구', '송파구',
       '양천구', '영등포구', '강북구', '용산구', '은평구', '종로구', '중구', '중랑구', '강서구',
       '관악구', '광진구', '구로구', '금천구', '노원구', '도봉구', '특별시'], dtype=object)

'''

stations[stations['구'] == '특별시']
'''
   oil_store                        주소    가격 셀프     상표    구
10     서현주유소  서울 특별시 도봉구 방학로 142 (방학동)  1524  Y  S-OIL  특별시
'''


# '특별시' => '도붕구'로 변경
stations.loc[stations['구'] == '특별시', '구'] = '도봉구'

# '특별시' => '도붕구'로 변경된 내용 확인
stations['구'].unique()
'''
array(['강동구', '동대문구', '동작구', '마포구', '서대문구', '서초구', '성동구', '성북구', '송파구',
       '양천구', '영등포구', '강북구', '용산구', '은평구', '종로구', '중구', '중랑구', '강서구',
       '관악구', '광진구', '구로구', '금천구', '노원구', '도봉구'], dtype=object)
'''



## 가격에 대한 결측치 확인
# '가격' 컬럼에 '-'가 있는지 확인
stations[stations['가격'] == '-']

'''
 oil_store                          주소                             가격  셀프   상표     구
18  명진석유(주)동서울주유소  서울특별시 강동구  천호대로 1456 (상일동)  -    Y   GS칼텍스   강동구
33          하나주유소   서울특별시 영등포구  도림로 236 (신길동)       -    N   S-OIL     영등포구
12   (주)에이앤이청담주유소    서울특별시 강북구 도봉로 155  (미아동)   -    Y   SK에너지   강북구
13          송정주유소    서울특별시 강북구 인수봉로 185 (수유동)      -     N   자가상표   강북구
'''

# '가격' 컬럼에 '-'가 아닌 데이터들만 추출하여 다시 데이터프레임으로 재저장
stations = stations[stations['가격'] != '-']

# '가격' 컬럼의 데이터를 실수로 변환
stations['가격'] = [float(value) for value in stations['가격']]
stations['가격'].head()
stations['가격'].tail()

# stations의 내부 index를 초기화
stations.reset_index(inplace=True)
stations.index
'''
RangeIndex(start=0, stop=487, step=1)
'''
stations.info()


# 데이터영역으로 나와있는'index' 컬럼 제거 => 기존 index 제거
del stations['index']

# 데이터 많을 경우 console창에 직접 출력해서 보기
stations.info()

## ------ 여기까지 전처리 작업 ------ ## 




# -----------------------------------------------#
### 2. 셀프 주유소는 정말 저렴한지 boxplot으로 확인
# ---------------------------------------------- #

# 1. boxplot 사용 : Pandas를 이용한 boxplot 시각화
stations.boxplot(column='가격', by='셀프', figsize=(12, 8))

# 2. boxplot 사용 : matplotlib.pyplot과 seaborn 이용한 boxplot 시각화
plt.figure(figsize=(12, 8))
sns.boxplot(x='상표', y='가격', hue='셀프', data=stations, palette='Set3')
plt.show()

# 3. swarmplot() 추가
plt.figure(figsize=(12, 8))
sns.boxplot(x='상표', y='가격', hue='셀프', data=stations, palette='Set3')
sns.swarmplot(x='상표', y='가격', data=stations, color='0.6')
plt.show()

##############################################################################
## 결론 : 휘발유 가격으로만 분석했을 경우, 전반적으로 셀프 주유가격이 저렴하다 ##
##############################################################################





# --------------------------------- #
### 3. 서울시 구별 주유 가격 확인 ###
# --------------------------------- #

# '가격' 컬럼을 기준으로 데이터 정렬
stations.sort_values(by='가격', ascending=True).head(10)
stations.sort_values(by='가격', ascending=False).head(10)

# '구'별 '가격'을 비교하기 위해 index를 구이름으로 : Pandas.pivot_table()
# np.mean : 평균값을 구하는 함수
gu_data = pd.pivot_table(stations, index=['구'], values='가격', aggfunc=np.mean)
'''
gu_data 데이터프레임을 생성하는데,
stations 데이터프레임으로부터
'구' 컬럼값을 gu_data 데이터프레임의 index값으로 설정
'가격' 컬럼값은 '구'별 '가격' 평균값(np.mean)으로 이용
'''

## 구글 맵 데이터 로드 : 02. skorea_municipalities_geo_simple.json
# 경로 저장할 변수 만들기
geo_path ="./data/02. skorea_municipalities_geo_simple.json"

# ~~.json 파일 읽기
'''
1. open("파일의 경로 및 파일명", encoding="인코딩 형식")
2. open()으로 열어 놓은 파일을 json.load()로 읽기
3. 작업을 위해 변수에 저장. 
   json.load()는 내부형식에 따라 전체타입은 리스트 => 리스트의 각항목 타입은 딕셔너리로 반환한다.
'''
geo_str = json.load(open(geo_path, encoding='utf-8'))


# folium을 이용한 시각화 작업
'''
folium은 시각화 결과를 html 파일로 저장하여 사용된다.
즉, 웹 페이지에 사용할 수 있는 상태로 저장.

따라서 folium의 시각화 내용은 변수에 저장하여 html파일로 만들어 사용된다.

1. 저장변수 = folium.Map(location=[위도, 경도], zoom_start="초기 확대 비율", tiles="지도 종류")
2. 저장변수.save("저장할 경로 및 파일명.html")
'''
map = folium.Map(location=[37.5502, 126.982], zoom_start=10.5, tiles="Stamen Toner")
map.save("./result/토너지도.html")


# 기본 구글지도 위에 행정구역을 그리고, 각 구의 평균 가격을 색상으로 표현
'''
1. 저장변수 = folium.Map(location=[위도, 경도], zoom_start="초기 확대 비율", tiles="지도 종류")
2. 저장변수.chropleth(geo_data="행정구역 데이터", 
                     data="시각화할 데이터(가격)", 
                     columns=[시각화할 데이터.index, '가격'],
                     file_color="데이터를 표현할 색 종류",          # PuRd / YlGnBu
                     key_on="기준(feature.id)"
                     )
3. 저장변수.save("저장경로 및 파일명.html")
'''
map = folium.Map(location=[37.5502, 126.982], zoom_start=10.5, tiles="Stamen Toner")
map.choropleth(geo_data=geo_str, 
               data=gu_data,
               columns=[gu_data.index, '가격'],
               fill_color='PuRd',
               key_on='feature.id'
               )
map.save("./result/가격.html")

# 마커 : 지도 위에 마커가 그려진다. 지도 확대되어도 마커 크기는 변화없이 그대로 상태 유지
'''
location=[45.5236, -122.6750] : 경도 , 위도 
number_of_sides=3 : 몇 각형인지 설정 (ex. 3(삼각형), 4(사각형) , ....)
radius=10 : 크기
popup='Hawthorne Bridge : 마우스로 클릭하면 해당 설명내용 나오는 팝업창
'''
map_sample = folium.Map(location=[45.5236, -122.6750],
                            zoom_start=13)
folium.RegularPolygonMarker([45.5012, -122.6655],
                            popup='Ross Island Bridge', fill_color='#132b5e',
                            number_of_sides=3, radius=10).add_to(map_sample)
folium.RegularPolygonMarker([45.5132, -122.6708],
                            popup='Hawthorne Bridge', fill_color='#45647d',
                            number_of_sides=4, radius=10).add_to(map_sample)
folium.RegularPolygonMarker([45.5275, -122.6692],
                            popup='Steel Bridge', fill_color='#769d96',
                            number_of_sides=6, radius=10).add_to(map_sample)
folium.RegularPolygonMarker([45.5318, -122.6745],
                            popup='Broadway Bridge', fill_color='#769d96',
                            number_of_sides=8, radius=10).add_to(map_sample)

map_sample.save('./result/folium_kr.html')



### 4. 서울시 주유 가격 상하위 10개 주유소 지도에 표기
# 1. 상위 10개
oil_price_top10 = stations.sort_values(by='가격', ascending=False).head(10)

# 2. 하위 10개
oil_price_bottom10 = stations.sort_values(by='가격', ascending=True).head(10)

# 구글 맵을 가져오기 위한 구글 API Key 등록
gmap_key = "AIzaSyC-ezB2J00Td105d4jqtdi2-JmZKuZ-5lY"

# 구글 API key 등록 : googlemaps.Client(key="사용자 등록 키")
gmaps = googlemaps.Client(key=gmap_key)

# 3. 상위 10개 주유소에 대한 위도 / 경도 저장 (주유소의 주소를 이용하여 요청)
lat = []
lng = []

## 반복문 진행율을 출력하기 위한 모듈 import
# 반복문 과도실행시 console창에 진행도를 볼 수 있다 : tqdm_notebook
from tqdm import tqdm_notebook

# for n in str(oil_price_top10['주소'][0]).split('(')

# 구글 자료 갖고 있지 않다 => 오류 => 예외
for n in tqdm_notebook(oil_price_top10.index):
    try:
        print(str(oil_price_top10['주소'][n]))                        # 서울 중구 통일로 30 (봉래동1가)
        # tmp_add, tmp_map : 임시 저장소
        tmp_add = str(oil_price_top10['주소'][n]).split('(')[0]
        print( tmp_add )                                              # 서울 중구 통일로 30 
        
        tmp_map = gmaps.geocode(tmp_add)
        print( tmp_map )
        
        tmp_loc = tmp_map[0].get('geometry')
        print(  tmp_loc  )
        
        lat.append(tmp_loc['location']['lat'])
        lng.append(tmp_loc['location']['lng'])
    
    except:    
        lat.append(np.nan)
        lng.append(np.nan)
        
# addr = '서울 중구 통일로 30 (봉래동1가)'
# print(addr.split('(')[0])

# 추출된 위도 / 경도를 데이터프레임에 추가
oil_price_top10['lat'] = lat
oil_price_top10['lng'] = lng


# 4. 하위 10개 주유소에 대한 위도 / 경도 저장 (주유소의 주소를 이용하여 요청)
lat = []
lng = []


# 구글 자료 갖고 있지 않다 => 오류 => 예외
for n in tqdm_notebook(oil_price_bottom10.index):
    try:
                         
        # tmp_add, tmp_map : 임시 저장소
        tmp_add = str(oil_price_bottom10['주소'][n]).split('(')[0]
        tmp_map = gmaps.geocode(tmp_add)
        tmp_loc = tmp_map[0].get('geometry')
       
        
        lat.append(tmp_loc['location']['lat'])
        lng.append(tmp_loc['location']['lng'])
    
    except:    
        lat.append(np.nan)
        lng.append(np.nan)
        
# 추출된 위도 / 경도를 데이터프레임에 추가
oil_price_bottom10['lat'] = lat
oil_price_bottom10['lng'] = lng

# 5. folium을 이용하여 상위 10개 주유소 / 하위 10개 주유소 marking
map = folium.Map(location=[37.502, 126.975], zoom_start=10.5)

for n in oil_price_top10.index:
    if pd.notnull(oil_price_top10['lat'][n]):
        
        folium.CircleMarker([oil_price_top10['lat'][n], oil_price_top10['lng'][n]],     # marking 좌표(위도/ 경도)
                            radius=15,                                                  # marker 크기
                            color='#CD3181',                                            # marker 테두리 색상
                            fill_color='#CD3181',                                       # marker 내부 색상
                            fill=True).add_to(map)                                         # marker 내부 채우기
                            


for n in oil_price_bottom10.index:
    if pd.notnull(oil_price_bottom10['lat'][n]):
        
        folium.CircleMarker([oil_price_bottom10['lat'][n], oil_price_bottom10['lng'][n]],     # marking 좌표(위도/ 경도)
                            radius=15,                                                        # marker 크기
                            color='#3186CC',                                                  # marker 테두리 색상
                            fill_color='#3186CC',                                             # marker 내부 색상
                            fill=True).add_to(map)                                               # marker 내부 채우기
                            
map.save('./result/주유소의 위치.html') 
# map.save('주유소의 위치.html') 


# 만약 생성된 html 파일이 실행중인 파이썬 파일과 동일한 위치에 있다면
# 파이썬 모듈을 이용하여 웹 브라우저를 통해 직접 확인할 수도 있습니다...
# 웹 브라우저 관련 모듈
import webbrowser

# 파이썬 코드로 직접 실행
webbrowser.open_new('주유소의 위치.html')      
